'''
DS 2500
Final Project: Environmental Impact of Fast Fashion Brands
4/1/25
'''
# Define custom colors - subdued but more distinctive palette
custom_colors = ['#2E7D32', '#3182BD', '#8E44AD', '#D35400', '#E57373']  # subdued green, clearer blue, nicer purple, subdued orange, medium pink'''
DS 2500
Final Project: Environmental Impact of Fast Fashion Brands
4/1/25
'''
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from matplotlib.ticker import FuncFormatter
from scipy import stats

# Set the style for cleaner plots with smaller size
plt.style.use('seaborn-v0_8-whitegrid')
sns.set_context("notebook") 
plt.rcParams['figure.figsize'] = (10, 6) 
plt.rcParams['font.size'] = 11  
plt.rcParams['axes.titlesize'] = 16  
plt.rcParams['figure.titlesize'] = 18  

# Define custom colors - medium shades of green, blue, purple + 2 more colors
custom_colors = ['#4CAF50', '#3F51B5', '#9C27B0', '#FF9800', '#00BCD4']  # green, blue, purple, orange, cyan

def load_data(filename='Sustainable Fashion Export 2025-04-06 19-58-02.csv'):
    """Load and preprocess the environmental data."""
    df = pd.read_csv(filename)
    
    # Convert numeric columns
    numeric_columns = ['Carbon_Footprint_MT', 'Water_Usage_Liters', 
                       'Waste_Production_KG', 'Average_Price_USD', 'Year']
    for col in numeric_columns:
        df[col] = pd.to_numeric(df[col], errors='coerce')
    
    # Convert binary columns
    df['Eco_Friendly'] = df['Eco_Friendly_Manufacturing'].map({'Yes': 1, 'No': 0})
    df['Has_Recycling'] = df['Recycling_Programs'].map({'Yes': 1, 'No': 0})
    
    return df

def format_millions(x, pos):
    """Format large numbers in millions."""
    return f'{x/1000000:.1f}M'

def format_thousands(x, pos):
    """Format numbers in thousands."""
    return f'{x/1000:.1f}K'

def plot_carbon_footprint_time(df):
    """Plot carbon footprint trend over time."""
    # Group by year
    yearly = df.groupby('Year').agg({
        'Carbon_Footprint_MT': 'mean',
    }).reset_index()
    
    # Create the plot
    plt.figure(figsize=(10, 6))
    
    # Plot carbon footprint trend with green
    plt.plot(yearly['Year'], yearly['Carbon_Footprint_MT'], 
             marker='o', linewidth=2.5, color=custom_colors[0])
    
    plt.title('Average Carbon Footprint Over Time', fontsize=16)
    plt.xlabel('Year')
    plt.ylabel('Carbon Footprint (MT)')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('carbon_footprint_time.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return yearly

def plot_water_usage_time(df):
    """Plot water usage trend over time."""
    # Group by year
    yearly = df.groupby('Year').agg({
        'Water_Usage_Liters': 'mean',
    }).reset_index()
    
    # Create the plot
    plt.figure(figsize=(10, 6))
    
    # Plot water usage trend with blue
    plt.plot(yearly['Year'], yearly['Water_Usage_Liters'], 
             marker='o', linewidth=2.5, color=custom_colors[1])
    
    # Format y-axis for millions
    plt.gca().yaxis.set_major_formatter(FuncFormatter(format_millions))
    
    plt.title('Average Water Usage Over Time', fontsize=16)
    plt.xlabel('Year')
    plt.ylabel('Water Usage (Million Liters)')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('water_usage_time.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return yearly

def plot_waste_production_time(df):
    """Plot waste production trend over time."""
    # Group by year
    yearly = df.groupby('Year').agg({
        'Waste_Production_KG': 'mean',
    }).reset_index()
    
    # Create the plot
    plt.figure(figsize=(10, 6))
    
    # Plot waste production trend with purple
    plt.plot(yearly['Year'], yearly['Waste_Production_KG'], 
             marker='o', linewidth=2.5, color=custom_colors[2])
    
    # Format y-axis for thousands
    plt.gca().yaxis.set_major_formatter(FuncFormatter(format_thousands))
    
    plt.title('Average Waste Production Over Time', fontsize=16)
    plt.xlabel('Year')
    plt.ylabel('Waste Production (Thousand KG)')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('waste_production_time.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return yearly

def analyze_sustainability_ratings(df):
    """Analyze sustainability ratings vs actual environmental impact."""
    # Group by sustainability rating
    rating_analysis = df.groupby('Sustainability_Rating').agg({
        'Carbon_Footprint_MT': 'mean',
    }).reset_index()
    
    # Create categorical order for ratings
    rating_analysis['Sustainability_Rating'] = pd.Categorical(
        rating_analysis['Sustainability_Rating'],
        categories=['A', 'B', 'C', 'D'],
        ordered=True
    )
    
    # Sort by rating
    rating_analysis = rating_analysis.sort_values('Sustainability_Rating')
    
    # Use custom colors for the ratings
    rating_colors = custom_colors[:len(rating_analysis)]
    
    # Create the plot
    plt.figure(figsize=(9, 5.5))
    
    # Create bar chart with custom colors
    bars = plt.bar(rating_analysis['Sustainability_Rating'], rating_analysis['Carbon_Footprint_MT'],
                  color=rating_colors)
    
    plt.title('Carbon Footprint by Sustainability Rating', fontsize=16)
    plt.ylabel('Average Carbon Footprint (MT)')
    plt.xlabel('Sustainability Rating (A=Best to D=Worst)')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('sustainability_rating_carbon.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return rating_analysis
