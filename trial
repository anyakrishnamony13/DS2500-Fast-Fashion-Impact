'''
DS 2500
Final Project: Environmental Impact of Fast Fashion Brands
4/1/25
'''

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from matplotlib.ticker import FuncFormatter
from scipy import stats

# Set the style for cleaner plots
plt.style.use('seaborn-v0_8-whitegrid')
sns.set_context("talk")
plt.rcParams['figure.figsize'] = (12, 8)

def load_data(filename='Sustainable Fashion Export 2025-04-06 19-58-02.csv'):
    """Load and preprocess the environmental data."""
    df = pd.read_csv(filename)
    
    # Convert numeric columns
    numeric_columns = ['Carbon_Footprint_MT', 'Water_Usage_Liters', 
                       'Waste_Production_KG', 'Average_Price_USD', 'Year']
    for col in numeric_columns:
        df[col] = pd.to_numeric(df[col], errors='coerce')
    
    # Convert binary columns
    df['Eco_Friendly'] = df['Eco_Friendly_Manufacturing'].map({'Yes': 1, 'No': 0})
    df['Has_Recycling'] = df['Recycling_Programs'].map({'Yes': 1, 'No': 0})
    
    return df

def format_millions(x, pos):
    """Format large numbers in millions."""
    return f'{x/1000000:.1f}M'

def format_thousands(x, pos):
    """Format numbers in thousands."""
    return f'{x/1000:.1f}K'

def plot_carbon_footprint_time(df):
    """Plot carbon footprint trend over time."""
    # Group by year
    yearly = df.groupby('Year').agg({
        'Carbon_Footprint_MT': 'mean',
        'Brand_ID': 'count'
    }).reset_index()
    
    yearly = yearly.rename(columns={'Brand_ID': 'Brand_Count'})
    
    # Create the plot
    plt.figure(figsize=(12, 8))
    
    # Plot carbon footprint trend
    sns.lineplot(data=yearly, x='Year', y='Carbon_Footprint_MT', 
                marker='o', linewidth=2.5, color='#2ca02c')
    
    # Add brand count as annotations
    for x, y, count in zip(yearly['Year'], yearly['Carbon_Footprint_MT'], yearly['Brand_Count']):
        plt.annotate(f'n={count}', (x, y), 
                    textcoords="offset points", 
                    xytext=(0, 10), 
                    ha='center')
    
    plt.title('Average Carbon Footprint Over Time', fontsize=14)
    plt.xlabel('Year')
    plt.ylabel('Carbon Footprint (MT)')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('carbon_footprint_time.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return yearly

def plot_water_usage_time(df):
    """Plot water usage trend over time."""
    # Group by year
    yearly = df.groupby('Year').agg({
        'Water_Usage_Liters': 'mean',
        'Brand_ID': 'count'
    }).reset_index()
    
    yearly = yearly.rename(columns={'Brand_ID': 'Brand_Count'})
    
    # Create the plot
    plt.figure(figsize=(12, 8))
    
    # Plot water usage trend
    sns.lineplot(data=yearly, x='Year', y='Water_Usage_Liters', 
                marker='o', linewidth=2.5, color='#1f77b4')
    
    # Format y-axis for millions
    plt.gca().yaxis.set_major_formatter(FuncFormatter(format_millions))
    
    # Add brand count as annotations
    for x, y, count in zip(yearly['Year'], yearly['Water_Usage_Liters'], yearly['Brand_Count']):
        plt.annotate(f'n={count}', (x, y), 
                    textcoords="offset points", 
                    xytext=(0, 10), 
                    ha='center')
    
    plt.title('Average Water Usage Over Time', fontsize=14)
    plt.xlabel('Year')
    plt.ylabel('Water Usage (Million Liters)')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('water_usage_time.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return yearly

def plot_waste_production_time(df):
    """Plot waste production trend over time."""
    # Group by year
    yearly = df.groupby('Year').agg({
        'Waste_Production_KG': 'mean',
        'Brand_ID': 'count'
    }).reset_index()
    
    yearly = yearly.rename(columns={'Brand_ID': 'Brand_Count'})
    
    # Create the plot
    plt.figure(figsize=(12, 8))
    
    # Plot waste production trend
    sns.lineplot(data=yearly, x='Year', y='Waste_Production_KG', 
                marker='o', linewidth=2.5, color='#d62728')
    
    # Format y-axis for thousands
    plt.gca().yaxis.set_major_formatter(FuncFormatter(format_thousands))
    
    # Add brand count as annotations
    for x, y, count in zip(yearly['Year'], yearly['Waste_Production_KG'], yearly['Brand_Count']):
        plt.annotate(f'n={count}', (x, y), 
                    textcoords="offset points", 
                    xytext=(0, 10), 
                    ha='center')
    
    plt.title('Average Waste Production Over Time', fontsize=14)
    plt.xlabel('Year')
    plt.ylabel('Waste Production (Thousand KG)')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('waste_production_time.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return yearly

def analyze_sustainability_ratings(df):
    """Analyze sustainability ratings vs actual environmental impact."""
    # Group by sustainability rating
    rating_analysis = df.groupby('Sustainability_Rating').agg({
        'Carbon_Footprint_MT': 'mean',
        'Brand_ID': 'count'
    }).reset_index()
    
    # Create categorical order for ratings
    rating_analysis['Sustainability_Rating'] = pd.Categorical(
        rating_analysis['Sustainability_Rating'],
        categories=['A', 'B', 'C', 'D'],
        ordered=True
    )
    
    # Sort by rating
    rating_analysis = rating_analysis.sort_values('Sustainability_Rating')
    
    # Create the plot
    plt.figure(figsize=(10, 6))
    
    # Create bar chart
    sns.barplot(x='Sustainability_Rating', y='Carbon_Footprint_MT', 
               data=rating_analysis, palette='RdYlGn_r')
    
    # Add brand count labels
    for i, count in enumerate(rating_analysis['Brand_ID']):
        plt.text(i, 5, f'n={count}', ha='center', fontsize=10)
    
    plt.title('Carbon Footprint by Sustainability Rating', fontsize=14)
    plt.ylabel('Average Carbon Footprint (MT)')
    plt.xlabel('Sustainability Rating (A=Best to D=Worst)')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('sustainability_rating_carbon.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return rating_analysis

def analyze_sustainability_water(df):
    """Analyze sustainability ratings vs water usage."""
    # Group by sustainability rating
    rating_analysis = df.groupby('Sustainability_Rating').agg({
        'Water_Usage_Liters': 'mean',
        'Brand_ID': 'count'
    }).reset_index()
    
    # Convert to millions for readability
    rating_analysis['Water_Usage_Millions'] = rating_analysis['Water_Usage_Liters'] / 1000000
    
    # Create categorical order for ratings
    rating_analysis['Sustainability_Rating'] = pd.Categorical(
        rating_analysis['Sustainability_Rating'],
        categories=['A', 'B', 'C', 'D'],
        ordered=True
    )
    
    # Sort by rating
    rating_analysis = rating_analysis.sort_values('Sustainability_Rating')
    
    # Create the plot
    plt.figure(figsize=(10, 6))
    
    # Create bar chart
    sns.barplot(x='Sustainability_Rating', y='Water_Usage_Millions', 
               data=rating_analysis, palette='RdYlGn_r')
    
    # Add brand count labels
    for i, count in enumerate(rating_analysis['Brand_ID']):
        plt.text(i, 0.2, f'n={count}', ha='center', fontsize=10)
    
    plt.title('Water Usage by Sustainability Rating', fontsize=14)
    plt.ylabel('Average Water Usage (Million Liters)')
    plt.xlabel('Sustainability Rating (A=Best to D=Worst)')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('sustainability_rating_water.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return rating_analysis

def analyze_sustainability_waste(df):
    """Analyze sustainability ratings vs waste production."""
    # Group by sustainability rating
    rating_analysis = df.groupby('Sustainability_Rating').agg({
        'Waste_Production_KG': 'mean',
        'Brand_ID': 'count'
    }).reset_index()
    
    # Convert to tons for readability
    rating_analysis['Waste_Production_Tons'] = rating_analysis['Waste_Production_KG'] / 1000
    
    # Create categorical order for ratings
    rating_analysis['Sustainability_Rating'] = pd.Categorical(
        rating_analysis['Sustainability_Rating'],
        categories=['A', 'B', 'C', 'D'],
        ordered=True
    )
    
    # Sort by rating
    rating_analysis = rating_analysis.sort_values('Sustainability_Rating')
    
    # Create the plot
    plt.figure(figsize=(10, 6))
    
    # Create bar chart
    sns.barplot(x='Sustainability_Rating', y='Waste_Production_Tons', 
               data=rating_analysis, palette='RdYlGn_r')
    
    # Add brand count labels
    for i, count in enumerate(rating_analysis['Brand_ID']):
        plt.text(i, 2, f'n={count}', ha='center', fontsize=10)
    
    plt.title('Waste Production by Sustainability Rating', fontsize=14)
    plt.ylabel('Average Waste Production (Tons)')
    plt.xlabel('Sustainability Rating (A=Best to D=Worst)')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('sustainability_rating_waste.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return rating_analysis

def analyze_material_impact(df):
    """Analyze impact of different materials on the environment (carbon)."""
    # Group by material type
    material_analysis = df.groupby('Material_Type').agg({
        'Carbon_Footprint_MT': 'mean',
        'Brand_ID': 'count'
    }).reset_index()
    
    # Only include materials with sufficient samples
    material_analysis = material_analysis[material_analysis['Brand_ID'] >= 2]
    
    # Sort by carbon footprint
    material_analysis = material_analysis.sort_values('Carbon_Footprint_MT', ascending=False)
    
    # Create plot
    plt.figure(figsize=(12, 8))
    
    # Plot horizontal bar chart
    sns.barplot(y='Material_Type', x='Carbon_Footprint_MT', 
               data=material_analysis, palette='viridis')
    
    # Add brand count labels
    for i, count in enumerate(material_analysis['Brand_ID']):
        plt.text(5, i, f'n={count}', va='center', fontsize=9)
    
    plt.title('Carbon Footprint by Material Type', fontsize=14)
    plt.xlabel('Average Carbon Footprint (MT)')
    plt.ylabel('Material Type')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('material_carbon_impact.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return material_analysis

def analyze_material_water(df):
    """Analyze impact of different materials on water usage."""
    # Group by material type
    material_analysis = df.groupby('Material_Type').agg({
        'Water_Usage_Liters': 'mean',
        'Brand_ID': 'count'
    }).reset_index()
    
    # Convert to millions for readability
    material_analysis['Water_Usage_Millions'] = material_analysis['Water_Usage_Liters'] / 1000000
    
    # Only include materials with sufficient samples
    material_analysis = material_analysis[material_analysis['Brand_ID'] >= 2]
    
    # Sort by water usage
    material_analysis = material_analysis.sort_values('Water_Usage_Millions', ascending=False)
    
    # Create plot
    plt.figure(figsize=(12, 8))
    
    # Plot horizontal bar chart
    sns.barplot(y='Material_Type', x='Water_Usage_Millions', 
               data=material_analysis, palette='Blues_d')
    
    # Add brand count labels
    for i, count in enumerate(material_analysis['Brand_ID']):
        plt.text(0.2, i, f'n={count}', va='center', fontsize=9)
    
    plt.title('Water Usage by Material Type', fontsize=14)
    plt.xlabel('Average Water Usage (Million Liters)')
    plt.ylabel('Material Type')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('material_water_impact.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return material_analysis

def analyze_country_carbon(df):
    """Analyze carbon footprint by country."""
    # Group by country
    country_analysis = df.groupby('Country').agg({
        'Carbon_Footprint_MT': 'mean',
        'Brand_ID': 'count'
    }).reset_index()
    
    # Only include countries with sufficient samples (at least 2 brands)
    country_analysis = country_analysis[country_analysis['Brand_ID'] >= 2]
    
    # Sort by carbon footprint for better visualization
    country_analysis = country_analysis.sort_values('Carbon_Footprint_MT', ascending=False)
    
    # Create the plot
    plt.figure(figsize=(12, 8))
    
    # Create horizontal bar chart for easier reading with many countries
    sns.barplot(
        y='Country', 
        x='Carbon_Footprint_MT',
        data=country_analysis,
        palette='viridis'
    )
    
    # Add brand count labels
    for i, count in enumerate(country_analysis['Brand_ID']):
        plt.text(5, i, f'n={count}', va='center', fontsize=10)
    
    plt.title('Average Carbon Footprint by Country', fontsize=14)
    plt.xlabel('Carbon Footprint (MT)')
    plt.ylabel('Country')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('country_carbon_impact.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return country_analysis

def analyze_country_water(df):
    """Analyze water usage by country."""
    # Group by country
    country_analysis = df.groupby('Country').agg({
        'Water_Usage_Liters': 'mean',
        'Brand_ID': 'count'
    }).reset_index()
    
    # Convert to millions for readability
    country_analysis['Water_Usage_Millions'] = country_analysis['Water_Usage_Liters'] / 1000000
    
    # Only include countries with sufficient samples (at least 2 brands)
    country_analysis = country_analysis[country_analysis['Brand_ID'] >= 2]
    
    # Sort by water usage for better visualization
    country_analysis = country_analysis.sort_values('Water_Usage_Millions', ascending=False)
    
    # Create the plot
    plt.figure(figsize=(12, 8))
    
    # Create horizontal bar chart
    sns.barplot(
        y='Country', 
        x='Water_Usage_Millions',
        data=country_analysis,
        palette='Blues_d'
    )
    
    # Add brand count labels
    for i, count in enumerate(country_analysis['Brand_ID']):
        plt.text(0.2, i, f'n={count}', va='center', fontsize=10)
    
    plt.title('Average Water Usage by Country', fontsize=14)
    plt.xlabel('Water Usage (Million Liters)')
    plt.ylabel('Country')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('country_water_impact.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return country_analysis

def analyze_price_vs_carbon(df):
    """Create a simple, clean scatter plot of price vs carbon footprint."""
    
    # Create a cleaner dataset by randomly sampling to reduce overcrowding
    if len(df) > 200:
        sample_df = df.sample(200, random_state=42)
    else:
        sample_df = df
    
    # Calculate the correlation coefficient
    corr = sample_df['Average_Price_USD'].corr(sample_df['Carbon_Footprint_MT'])
    
    # Create the scatter plot
    plt.figure(figsize=(12, 8))
    
    # Create a scatter plot with transparency to help with overlap
    sns.scatterplot(
        data=sample_df,
        x='Average_Price_USD',
        y='Carbon_Footprint_MT',
        hue='Sustainability_Rating',  # Color by sustainability rating
        palette='viridis',
        s=100,  # Slightly larger point size
        alpha=0.7,  # Some transparency
    )
    
    # Add a trend line
    x = sample_df['Average_Price_USD']
    y = sample_df['Carbon_Footprint_MT']
    
    # Calculate and plot trendline
    slope, intercept, r_value, p_value, std_err = stats.linregress(x, y)
    plt.plot(x, intercept + slope*x, 'r--', linewidth=2)
    
    # Add labels and title
    plt.xlabel('Average Price (USD)', fontsize=14)
    plt.ylabel('Carbon Footprint (MT)', fontsize=14)
    plt.title(f'Relationship Between Price and Carbon Footprint (r = {corr:.2f})', fontsize=16)
    
    # Add a grid
    plt.grid(True, alpha=0.3)
    
    # Add a legend
    plt.legend(title='Sustainability Rating', title_fontsize=12)
    
    # Add text annotations for insights
    if abs(corr) < 0.1:
        insight = "No significant relationship between price and carbon footprint"
    elif corr > 0:
        insight = "Higher priced products tend to have HIGHER carbon footprints"
    else:
        insight = "Higher priced products tend to have LOWER carbon footprints"
    
    plt.figtext(0.5, 0.01, insight, ha='center', fontsize=14, 
               bbox=dict(facecolor='white', alpha=0.8, boxstyle='round,pad=0.5'))
    
    # Save the figure
    plt.tight_layout()
    plt.savefig('price_vs_carbon_scatter.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return corr

def analyze_price_category_carbon(df):
    """Create a bar chart showing average carbon footprint by price category."""
    
    # Create price categories
    bins = [0, 100, 250, 500]
    labels = ['Budget', 'Mid-range', 'Premium']
    df['Price_Category'] = pd.cut(df['Average_Price_USD'], bins=bins, labels=labels)
    
    # Calculate average carbon footprint by price category
    category_data = df.groupby('Price_Category').agg({
        'Carbon_Footprint_MT': 'mean',
        'Brand_ID': 'count'
    }).reset_index()
    
    # Create the plot
    plt.figure(figsize=(10, 6))
    
    # Create bar chart
    ax = sns.barplot(
        data=category_data,
        x='Price_Category',
        y='Carbon_Footprint_MT',
        palette='Blues_d'
    )
    
    # Add the number of brands in each category
    for i, row in enumerate(category_data.itertuples()):
        ax.text(i, row.Carbon_Footprint_MT + 5, f'n={row.Brand_ID}', 
               ha='center', va='bottom', fontsize=12)
    
    # Add labels and title
    plt.xlabel('Price Category', fontsize=14)
    plt.ylabel('Average Carbon Footprint (MT)', fontsize=14)
    plt.title('Average Carbon Footprint by Price Category', fontsize=16)
    plt.grid(True, alpha=0.3)
    
    # Save the figure
    plt.tight_layout()
    plt.savefig('price_category_carbon.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return category_data

def analyze_eco_friendly_carbon(df):
    """Analyze whether eco-friendly claims match reality for carbon footprint."""
    # Group by eco-friendly manufacturing claims
    eco_analysis = df.groupby('Eco_Friendly_Manufacturing').agg({
        'Carbon_Footprint_MT': 'mean',
        'Brand_ID': 'count'
    }).reset_index()
    
    # Create the plot
    plt.figure(figsize=(10, 6))
    
    # Create bar chart
    sns.barplot(
        x='Eco_Friendly_Manufacturing', 
        y='Carbon_Footprint_MT',
        data=eco_analysis, 
        palette='Set2'
    )
    
    # Add brand count labels
    for i, count in enumerate(eco_analysis['Brand_ID']):
        plt.text(i, 10, f'n={count}', ha='center', fontsize=12)
    
    plt.title('Carbon Footprint by Eco-Friendly Manufacturing Claims', fontsize=14)
    plt.xlabel('Eco-Friendly Claim')
    plt.ylabel('Average Carbon Footprint (MT)')
    plt.grid(True, alpha=0.3)
    
    # Calculate percent difference for insight
    if 'Yes' in eco_analysis['Eco_Friendly_Manufacturing'].values and 'No' in eco_analysis['Eco_Friendly_Manufacturing'].values:
        yes_carbon = eco_analysis[eco_analysis['Eco_Friendly_Manufacturing']=='Yes']['Carbon_Footprint_MT'].iloc[0]
        no_carbon = eco_analysis[eco_analysis['Eco_Friendly_Manufacturing']=='No']['Carbon_Footprint_MT'].iloc[0]
        pct_diff = ((yes_carbon / no_carbon) - 1) * 100
        
        if yes_carbon < no_carbon:
            insight = f"Eco-friendly brands have {abs(pct_diff):.1f}% LOWER carbon footprint"
        else:
            insight = f"Eco-friendly brands have {pct_diff:.1f}% HIGHER carbon footprint (greenwashing concern)"
        
        plt.figtext(0.5, 0.01, insight, ha='center', fontsize=14, 
                  bbox=dict(facecolor='white', alpha=0.8, boxstyle='round,pad=0.5'))
    
    plt.tight_layout()
    plt.savefig('eco_friendly_carbon.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return eco_analysis

def analyze_eco_friendly_water(df):
    """Analyze whether eco-friendly claims match reality for water usage."""
    # Group by eco-friendly manufacturing claims
    eco_analysis = df.groupby('Eco_Friendly_Manufacturing').agg({
        'Water_Usage_Liters': 'mean',
        'Brand_ID': 'count'
    }).reset_index()
    
    # Convert to millions for readability
    eco_analysis['Water_Usage_Millions'] = eco_analysis['Water_Usage_Liters'] / 1000000
    
    # Create the plot
    plt.figure(figsize=(10, 6))
    
    # Create bar chart
    sns.barplot(
        x='Eco_Friendly_Manufacturing', 
        y='Water_Usage_Millions',
        data=eco_analysis, 
        palette='Set2'
    )
    
    # Add brand count labels
    for i, count in enumerate(eco_analysis['Brand_ID']):
        plt.text(i, 0.2, f'n={count}', ha='center', fontsize=12)
    
    plt.title('Water Usage by Eco-Friendly Manufacturing Claims', fontsize=14)
    plt.xlabel('Eco-Friendly Claim')
    plt.ylabel('Average Water Usage (Million Liters)')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('eco_friendly_water.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return eco_analysis

def main():
    """Run all environmental impact analyses."""
    # Load the data
    df = load_data()
    
    # Generate visualizations (one graph per function)
    carbon_time = plot_carbon_footprint_time(df)
    water_time = plot_water_usage_time(df)
    waste_time = plot_waste_production_time(df)
    
    rating_carbon = analyze_sustainability_ratings(df)
    rating_water = analyze_sustainability_water(df)
    rating_waste = analyze_sustainability_waste(df)
    
    material_carbon = analyze_material_impact(df)
    material_water = analyze_material_water(df)
    
    country_carbon = analyze_country_carbon(df)
    country_water = analyze_country_water(df)
    
    price_correlation = analyze_price_vs_carbon(df)
    price_categories = analyze_price_category_carbon(df)
    
    eco_carbon = analyze_eco_friendly_carbon(df)
    eco_water = analyze_eco_friendly_water(df)
    
    # Print insights
    print("\n===== ENVIRONMENTAL IMPACT ANALYSIS RESULTS =====\n")
    
    # Time trends
    print("ENVIRONMENTAL METRICS OVER TIME:")
    years = carbon_time['Year'].unique()
    if len(years) >= 2:
        first_year = carbon_time['Year'].min()
        last_year = carbon_time['Year'].max()
        carbon_first = carbon_time[carbon_time['Year']==first_year]['Carbon_Footprint_MT'].iloc[0]
        carbon_last = carbon_time[carbon_time['Year']==last_year]['Carbon_Footprint_MT'].iloc[0]
        carbon_change = ((carbon_last / carbon_first) - 1) * 100
        
        print(f"- From {first_year} to {last_year}, carbon footprint has {'increased' if carbon_change > 0 else 'decreased'} by {abs(carbon_change):.1f}%")
    else:
        print("- Not enough years with data to determine trends")
    
    # Sustainability ratings
    print("\nSUSTAINABILITY RATING REALITY CHECK:")
    if 'A' in rating_carbon['Sustainability_Rating'].values and 'D' in rating_carbon['Sustainability_Rating'].values:
        a_carbon = rating_carbon[rating_carbon['Sustainability_Rating']=='A']['Carbon_Footprint_MT'].iloc[0]
        d_carbon = rating_carbon[rating_carbon['Sustainability_Rating']=='D']['Carbon_Footprint_MT'].iloc[0]
        pct_diff = ((a_carbon / d_carbon) - 1) * 100
        
        if a_carbon < d_carbon:
            print(f"- VERIFIED: A-rated brands have {abs(pct_diff):.1f}% lower carbon footprint than D-rated brands")
        else:
            print(f"- CONCERNING: A-rated brands have {pct_diff:.1f}% higher carbon footprint than D-rated brands")
    
    # Material impact
    print("\nMATERIAL IMPACT:")
    if len(material_carbon) >= 2:
        best_material = material_carbon.iloc[-1]
        worst_material = material_carbon.iloc[0]
        print(f"- Most eco-friendly material: {best_material['Material_Type']} ({best_material['Carbon_Footprint_MT']:.1f} MT carbon)")
        print(f"- Least eco-friendly material: {worst_material['Material_Type']} ({worst_material['Carbon_Footprint_MT']:.1f} MT carbon)")
    
    # Country impact
    print("\nCOUNTRY IMPACT:")
    if len(country_carbon) >= 2:
        best_country = country_carbon.iloc[-1]
        worst_country = country_carbon.iloc[0]
        print(f"- Country with lowest footprint: {best_country['Country']} ({best_country['Carbon_Footprint_MT']:.1f} MT carbon)")
        print(f"- Country with highest footprint: {worst_country['Country']} ({worst_country['Carbon_Footprint_MT']:.1f} MT carbon)")
    
    # Price vs Impact
    print("\nPRICE VS ENVIRONMENTAL IMPACT:")
    if abs(price_correlation) < 0.1:
        relationship = "no significant relationship"
    elif price_correlation > 0:
        relationship = f"positive relationship (r={price_correlation:.2f}): higher prices correlate with higher carbon footprint"
    else:
        relationship = f"negative relationship (r={price_correlation:.2f}): higher prices correlate with lower carbon footprint"
    
    print(f"- There is {relationship}")
    
    # Eco-friendly claims
    print("\nECO-FRIENDLY CLAIMS VS REALITY:")
    if 'Yes' in eco_carbon['Eco_Friendly_Manufacturing'].values and 'No' in eco_carbon['Eco_Friendly_Manufacturing'].values:
        yes_carbon = eco_carbon[eco_carbon['Eco_Friendly_Manufacturing']=='Yes']['Carbon_Footprint_MT'].iloc[0]
        no_carbon = eco_carbon[eco_carbon['Eco_Friendly_Manufacturing']=='No']['Carbon_Footprint_MT'].iloc[0]
        pct_diff = ((yes_carbon / no_carbon) - 1) * 100
        
        if yes_carbon < no_carbon:
            print(f"- VERIFIED: Brands claiming eco-friendly manufacturing have {abs(pct_diff):.1f}% lower carbon footprint")
        else:
            print(f"- GREENWASHING CONCERN: Brands claiming eco-friendly manufacturing have {pct_diff:.1f}% higher carbon footprint")
    
    print("\nAll visualizations have been saved as PNG files in the current directory.")

if __name__ == "__main__":
    main()
