'''
DS 2500
Final Project: Environmental Impact of Fast Fashion Brands
4/1/25
'''

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib
matplotlib.use('Agg')  # Use non-interactive backend
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings("ignore")

# Set styling options for better readability
plt.style.use('seaborn-v0_8-whitegrid')
sns.set_palette('viridis')
plt.rcParams['figure.figsize'] = (10, 6)
plt.rcParams['font.size'] = 12

# Constants
FILENAME = 'Sustainable Fashion Export 2025-04-06 19-58-02.csv'

# 1. Data Loading and Preprocessing
def load_and_preprocess_data(filename):
    """Load and preprocess the sustainable fashion data."""
    print(f"Loading data from {filename}...")
    
    # Load data
    df = pd.read_csv(filename)
    
    # Convert relevant columns to numeric
    numeric_cols = ['Carbon_Footprint_MT', 'Water_Usage_Liters', 
                   'Waste_Production_KG', 'Product_Lines', 'Average_Price_USD']
    for col in numeric_cols:
        df[col] = pd.to_numeric(df[col], errors='coerce')
    
    # Convert year to numeric
    df['Year'] = pd.to_numeric(df['Year'], errors='coerce')
    
    # Map sustainability ratings to numeric for correlation analysis
    rating_map = {'A': 4, 'B': 3, 'C': 2, 'D': 1}
    df['Rating_Numeric'] = df['Sustainability_Rating'].map(rating_map)
    
    # Binary features
    df['Has_Recycling'] = df['Recycling_Programs'].map({'Yes': 1, 'No': 0})
    df['Is_Eco_Friendly'] = df['Eco_Friendly_Manufacturing'].map({'Yes': 1, 'No': 0})
    
    print(f"Loaded data with {df.shape[0]} brands and {df.shape[1]} features")
    return df

# 2. Environmental Impact Over Time
def plot_environmental_impact_over_time(df):
    """Plot environmental metrics over time."""
    print("Analyzing environmental impact trends over time...")
    
    # Group by year and calculate mean metrics
    yearly_data = df.groupby('Year').agg({
        'Carbon_Footprint_MT': 'mean',
        'Water_Usage_Liters': 'mean',
        'Waste_Production_KG': 'mean'
    }).reset_index()
    
    # Create plots for each metric
    fig, axes = plt.subplots(3, 1, figsize=(10, 15))
    
    # Carbon footprint over time
    sns.lineplot(x='Year', y='Carbon_Footprint_MT', data=yearly_data, 
                marker='o', linewidth=2, ax=axes[0])
    axes[0].set_title('Average Carbon Footprint Over Time', fontsize=14)
    axes[0].set_ylabel('Carbon Footprint (MT)')
    
    # Water usage over time (in millions of liters for readability)
    yearly_data['Water_Usage_Millions'] = yearly_data['Water_Usage_Liters'] / 1000000
    sns.lineplot(x='Year', y='Water_Usage_Millions', data=yearly_data, 
                marker='o', linewidth=2, ax=axes[1])
    axes[1].set_title('Average Water Usage Over Time', fontsize=14)
    axes[1].set_ylabel('Water Usage (Millions of Liters)')
    
    # Waste production over time (in tons for readability)
    yearly_data['Waste_Production_Tons'] = yearly_data['Waste_Production_KG'] / 1000
    sns.lineplot(x='Year', y='Waste_Production_Tons', data=yearly_data, 
                marker='o', linewidth=2, ax=axes[2])
    axes[2].set_title('Average Waste Production Over Time', fontsize=14)
    axes[2].set_ylabel('Waste Production (Tons)')
    
    plt.tight_layout()
    plt.savefig('environmental_impact_over_time.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return yearly_data

# 3. Sustainability Rating vs. Actual Impact
def analyze_sustainability_rating_vs_impact(df):
    """Analyze the relationship between sustainability ratings and actual environmental impact."""
    print("Analyzing sustainability ratings vs. actual environmental impact...")
    
    # Group by sustainability rating
    rating_impact = df.groupby('Sustainability_Rating').agg({
        'Carbon_Footprint_MT': 'mean',
        'Water_Usage_Liters': 'mean',
        'Waste_Production_KG': 'mean',
        'Brand_ID': 'count'
    }).rename(columns={'Brand_ID': 'Count'}).reset_index()
    
    # Sort ratings in correct order (A to D)
    rating_impact['Sustainability_Rating'] = pd.Categorical(
        rating_impact['Sustainability_Rating'], 
        categories=['A', 'B', 'C', 'D'],
        ordered=True
    )
    rating_impact = rating_impact.sort_values('Sustainability_Rating')
    
    # Create a horizontal bar chart for easy comparison
    fig, ax = plt.subplots(figsize=(12, 8))
    
    # Convert to more readable units
    rating_impact['Water_Usage_Millions'] = rating_impact['Water_Usage_Liters'] / 1000000
    rating_impact['Waste_Production_Tons'] = rating_impact['Waste_Production_KG'] / 1000
    
    # Plot carbon footprint by rating
    sns.barplot(x='Carbon_Footprint_MT', y='Sustainability_Rating', data=rating_impact, 
               palette='RdYlGn_r', ax=ax)
    
    ax.set_title('Average Carbon Footprint by Sustainability Rating', fontsize=14)
    ax.set_xlabel('Carbon Footprint (MT)')
    ax.set_ylabel('Sustainability Rating (A=Best, D=Worst)')
    
    # Add count to y-axis labels
    ylabels = [f"{rating} (n={count})" for rating, count in 
              zip(rating_impact['Sustainability_Rating'], rating_impact['Count'])]
    ax.set_yticklabels(ylabels)
    
    # Add a text box with insights
    textstr = '\n'.join([
        'Key Insights:',
        f"A-rated brands: {rating_impact[rating_impact['Sustainability_Rating']=='A']['Carbon_Footprint_MT'].iloc[0]:.2f} MT",
        f"D-rated brands: {rating_impact[rating_impact['Sustainability_Rating']=='D']['Carbon_Footprint_MT'].iloc[0]:.2f} MT"
    ])
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.05, 0.05, textstr, transform=ax.transAxes, fontsize=12,
            verticalalignment='bottom', bbox=props)
    
    plt.tight_layout()
    plt.savefig('sustainability_rating_vs_carbon.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    # Create multi-metric comparison
    fig, axes = plt.subplots(1, 3, figsize=(16, 6))
    
    # Carbon footprint
    sns.barplot(x='Sustainability_Rating', y='Carbon_Footprint_MT', 
               data=rating_impact, palette='RdYlGn_r', ax=axes[0])
    axes[0].set_title('Carbon Footprint (MT)')
    axes[0].set_xlabel('Rating')
    
    # Water usage
    sns.barplot(x='Sustainability_Rating', y='Water_Usage_Millions', 
               data=rating_impact, palette='RdYlGn_r', ax=axes[1])
    axes[1].set_title('Water Usage (Million Liters)')
    axes[1].set_xlabel('Rating')
    
    # Waste production
    sns.barplot(x='Sustainability_Rating', y='Waste_Production_Tons', 
               data=rating_impact, palette='RdYlGn_r', ax=axes[2])
    axes[2].set_title('Waste Production (Tons)')
    axes[2].set_xlabel('Rating')
    
    plt.suptitle('Environmental Impact Metrics by Sustainability Rating', fontsize=16)
    plt.tight_layout()
    plt.subplots_adjust(top=0.85)
    plt.savefig('sustainability_all_metrics.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return rating_impact

# 4. Impact of Material Type on Environment
def analyze_material_impact(df):
    """Analyze the environmental impact of different material types."""
    print("Analyzing impact of different materials on environmental metrics...")
    
    # Group by material type
    material_impact = df.groupby('Material_Type').agg({
        'Carbon_Footprint_MT': 'mean',
        'Water_Usage_Liters': 'mean',
        'Waste_Production_KG': 'mean',
        'Brand_ID': 'count'
    }).rename(columns={'Brand_ID': 'Count'}).reset_index()
    
    # Sort by carbon footprint for better visualization
    material_impact = material_impact.sort_values('Carbon_Footprint_MT', ascending=False)
    
    # Create a horizontal bar chart for easy comparison
    fig, ax = plt.subplots(figsize=(12, 8))
    
    # Plot carbon footprint by material
    sns.barplot(x='Carbon_Footprint_MT', y='Material_Type', data=material_impact, 
               palette='viridis', ax=ax)
    
    ax.set_title('Average Carbon Footprint by Material Type', fontsize=14)
    ax.set_xlabel('Carbon Footprint (MT)')
    ax.set_ylabel('Material Type')
    
    # Add count to y-axis labels
    ylabels = [f"{material} (n={count})" for material, count in 
              zip(material_impact['Material_Type'], material_impact['Count'])]
    ax.set_yticklabels(ylabels)
    
    # Highlight the best and worst materials
    best_material = material_impact.iloc[-1]['Material_Type']
    worst_material = material_impact.iloc[0]['Material_Type']
    
    # Add a text box with insights
    textstr = '\n'.join([
        'Key Insights:',
        f"Highest impact: {worst_material} ({material_impact.iloc[0]['Carbon_Footprint_MT']:.2f} MT)",
        f"Lowest impact: {best_material} ({material_impact.iloc[-1]['Carbon_Footprint_MT']:.2f} MT)"
    ])
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.05, 0.05, textstr, transform=ax.transAxes, fontsize=12,
            verticalalignment='bottom', bbox=props)
    
    plt.tight_layout()
    plt.savefig('material_carbon_impact.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return material_impact

# 5. Carbon Footprint vs. Price
def analyze_price_vs_impact(df):
    """Analyze the relationship between price and environmental impact."""
    print("Analyzing relationship between price and environmental impact...")
    
    # Create scatter plot with regression line
    fig, ax = plt.subplots(figsize=(10, 6))
    
    # Plot individual data points
    sns.scatterplot(x='Average_Price_USD', y='Carbon_Footprint_MT', 
                   hue='Sustainability_Rating', size='Water_Usage_Liters',
                   sizes=(50, 400), alpha=0.7, palette='viridis',
                   data=df, ax=ax)
    
    # Add regression line
    sns.regplot(x='Average_Price_USD', y='Carbon_Footprint_MT', 
               data=df, scatter=False, ax=ax, color='red')
    
    # Calculate correlation coefficient and p-value
    corr = df['Average_Price_USD'].corr(df['Carbon_Footprint_MT'])
    
    ax.set_title(f'Relationship Between Price and Carbon Footprint (r = {corr:.2f})', fontsize=14)
    ax.set_xlabel('Average Price (USD)')
    ax.set_ylabel('Carbon Footprint (MT)')
    
    plt.tight_layout()
    plt.savefig('price_vs_carbon.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    # Create price categories for simplified bar chart
    df['Price_Category'] = pd.qcut(df['Average_Price_USD'], 3, 
                                  labels=['Low', 'Medium', 'High'])
    
    # Group by price category
    price_impact = df.groupby('Price_Category').agg({
        'Carbon_Footprint_MT': 'mean',
        'Water_Usage_Liters': 'mean',
        'Waste_Production_KG': 'mean',
        'Brand_ID': 'count'
    }).rename(columns={'Brand_ID': 'Count'}).reset_index()
    
    # Create bar chart for price categories
    fig, ax = plt.subplots(figsize=(10, 6))
    
    sns.barplot(x='Price_Category', y='Carbon_Footprint_MT', 
               data=price_impact, palette='Blues_d', ax=ax)
    
    ax.set_title('Average Carbon Footprint by Price Category', fontsize=14)
    ax.set_xlabel('Price Category')
    ax.set_ylabel('Average Carbon Footprint (MT)')
    
    # Add count labels
    for i, v in enumerate(price_impact['Count']):
        ax.text(i, 10, f"n={v}", ha='center')
    
    plt.tight_layout()
    plt.savefig('price_category_impact.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return price_impact

# 6. Eco-Friendly Claims vs Reality
def analyze_eco_friendly_claims(df):
    """Analyze whether eco-friendly manufacturing claims match actual environmental footprints."""
    print("Analyzing eco-friendly manufacturing claims vs. actual footprint...")
    
    # Group by eco-friendly manufacturing status
    eco_impact = df.groupby('Eco_Friendly_Manufacturing').agg({
        'Carbon_Footprint_MT': 'mean',
        'Water_Usage_Liters': 'mean',
        'Waste_Production_KG': 'mean',
        'Brand_ID': 'count'
    }).rename(columns={'Brand_ID': 'Count'}).reset_index()
    
    # Create multi-metric comparison
    fig, axes = plt.subplots(1, 3, figsize=(16, 6))
    
    # Carbon footprint
    sns.barplot(x='Eco_Friendly_Manufacturing', y='Carbon_Footprint_MT', 
               data=eco_impact, palette='RdYlGn_r', ax=axes[0])
    axes[0].set_title('Carbon Footprint (MT)')
    axes[0].set_xlabel('Eco-Friendly Claim')
    
    # Water usage (in millions of liters for readability)
    eco_impact['Water_Usage_Millions'] = eco_impact['Water_Usage_Liters'] / 1000000
    sns.barplot(x='Eco_Friendly_Manufacturing', y='Water_Usage_Millions', 
               data=eco_impact, palette='RdYlGn_r', ax=axes[1])
    axes[1].set_title('Water Usage (Million Liters)')
    axes[1].set_xlabel('Eco-Friendly Claim')
    
    # Waste production (in tons for readability)
    eco_impact['Waste_Production_Tons'] = eco_impact['Waste_Production_KG'] / 1000
    sns.barplot(x='Eco_Friendly_Manufacturing', y='Waste_Production_Tons', 
               data=eco_impact, palette='RdYlGn_r', ax=axes[2])
    axes[2].set_title('Waste Production (Tons)')
    axes[2].set_xlabel('Eco-Friendly Claim')
    
    # Add count labels to each bar
    for i, ax in enumerate(axes):
        for j, v in enumerate(eco_impact['Count']):
            if i == 0:
                ax.text(j, 10, f"n={v}", ha='center')
    
    plt.suptitle('Environmental Impact by Eco-Friendly Manufacturing Claims', fontsize=16)
    plt.tight_layout()
    plt.subplots_adjust(top=0.85)
    plt.savefig('eco_friendly_claims_reality.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    # Calculate the percentage difference between Yes and No claims
    yes_carbon = eco_impact[eco_impact['Eco_Friendly_Manufacturing'] == 'Yes']['Carbon_Footprint_MT'].iloc[0]
    no_carbon = eco_impact[eco_impact['Eco_Friendly_Manufacturing'] == 'No']['Carbon_Footprint_MT'].iloc[0]
    
    pct_diff = ((yes_carbon - no_carbon) / no_carbon) * 100
    
    print(f"Brands claiming eco-friendly manufacturing have {pct_diff:.1f}% {'higher' if pct_diff > 0 else 'lower'} "
          f"carbon footprint than those that don't claim eco-friendly practices.")
    
    return eco_impact

# Main function to run all analyses
def main():
    """Run all environmental impact analyses."""
    
    # 1. Load and preprocess data
    df = load_and_preprocess_data(FILENAME)
    
    # 2. Environmental impact over time
    yearly_data = plot_environmental_impact_over_time(df)
    
    # 3. Sustainability rating vs. actual impact
    rating_impact = analyze_sustainability_rating_vs_impact(df)
    
    # 4. Material impact on environment
    material_impact = analyze_material_impact(df)
    
    # 5. Price vs. environmental impact
    price_impact = analyze_price_vs_impact(df)
    
    # 6. Eco-friendly claims vs. reality
    eco_impact = analyze_eco_friendly_claims(df)
    
    # Print summary insights
    print("\n===== SUMMARY INSIGHTS =====")
    print("1. SUSTAINABILITY RATINGS:")
    if 'A' in rating_impact['Sustainability_Rating'].values and 'D' in rating_impact['Sustainability_Rating'].values:
        a_carbon = rating_impact[rating_impact['Sustainability_Rating'] == 'A']['Carbon_Footprint_MT'].iloc[0]
        d_carbon = rating_impact[rating_impact['Sustainability_Rating'] == 'D']['Carbon_Footprint_MT'].iloc[0]
        print(f"   - A-rated brands average {a_carbon:.1f} MT carbon footprint")
        print(f"   - D-rated brands average {d_carbon:.1f} MT carbon footprint")
        print(f"   - {'CONCERNING: A-rated brands have higher footprint than D-rated' if a_carbon > d_carbon else 'GOOD: A-rated brands have lower footprint than D-rated'}")
    
    print("\n2. MATERIAL IMPACT:")
    best_material = material_impact.iloc[-1]
    worst_material = material_impact.iloc[0]
    print(f"   - Most eco-friendly material: {best_material['Material_Type']} ({best_material['Carbon_Footprint_MT']:.1f} MT)")
    print(f"   - Least eco-friendly material: {worst_material['Material_Type']} ({worst_material['Carbon_Footprint_MT']:.1f} MT)")
    
    print("\n3. PRICE VS. IMPACT:")
    corr = df['Average_Price_USD'].corr(df['Carbon_Footprint_MT'])
    print(f"   - Correlation between price and carbon footprint: {corr:.2f}")
    print(f"   - {'Higher-priced products tend to have HIGHER environmental impact' if corr > 0.1 else 'Higher-priced products tend to have LOWER environmental impact' if corr < -0.1 else 'Price shows little relationship with environmental impact'}")
    
    print("\n4. ECO-FRIENDLY CLAIMS:")
    yes_carbon = eco_impact[eco_impact['Eco_Friendly_Manufacturing'] == 'Yes']['Carbon_Footprint_MT'].iloc[0]
    no_carbon = eco_impact[eco_impact['Eco_Friendly_Manufacturing'] == 'No']['Carbon_Footprint_MT'].iloc[0]
    pct_diff = ((yes_carbon - no_carbon) / no_carbon) * 100
    
    print(f"   - Brands claiming eco-friendly practices: {pct_diff:.1f}% {'HIGHER' if pct_diff > 0 else 'LOWER'} carbon footprint")
    print(f"   - {'GREENWASHING CONCERN: Eco-friendly claims do not match reality' if pct_diff > 0 else 'GOOD: Eco-friendly claims are supported by data'}")
    
    print("\nAll visualizations have been saved to image files.")

if __name__ == "__main__":
    main()
