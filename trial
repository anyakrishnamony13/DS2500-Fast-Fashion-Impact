'''
DS 2500
Final Project: Environmental Impact of Fast Fashion Brands
4/1/25
'''

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.preprocessing import StandardScaler
from scipy import stats

# Set the style for cleaner plots
plt.style.use('seaborn-v0_8-whitegrid')
sns.set_context("talk")
plt.rcParams['figure.figsize'] = (12, 8)

def create_simple_scatter_plot(filename='Sustainable Fashion Export 2025-04-06 19-58-02.csv'):
    """Create a simple, clean scatter plot of price vs carbon footprint"""
    
    # Load the data
    df = pd.read_csv(filename)
    
    # Convert numeric columns
    df['Carbon_Footprint_MT'] = pd.to_numeric(df['Carbon_Footprint_MT'], errors='coerce')
    df['Average_Price_USD'] = pd.to_numeric(df['Average_Price_USD'], errors='coerce')
    
    # Create a simplified dataset by randomly sampling to reduce overcrowding
    # Adjust the sample size as needed
    if len(df) > 200:
        sample_df = df.sample(200, random_state=42)
    else:
        sample_df = df
    
    # Create a simple scatter plot
    plt.figure(figsize=(12, 8))
    
    # Calculate the correlation coefficient
    corr = sample_df['Average_Price_USD'].corr(sample_df['Carbon_Footprint_MT'])
    
    # Create a scatter plot with transparency to help with overlap
    sns.scatterplot(
        data=sample_df,
        x='Average_Price_USD',
        y='Carbon_Footprint_MT',
        hue='Sustainability_Rating',  # Color by sustainability rating
        palette='viridis',
        s=100,  # Slightly larger point size
        alpha=0.7,  # Some transparency
    )
    
    # Add a trend line
    x = sample_df['Average_Price_USD']
    y = sample_df['Carbon_Footprint_MT']
    
    # Calculate and plot trendline
    slope, intercept, r_value, p_value, std_err = stats.linregress(x, y)
    plt.plot(x, intercept + slope*x, 'r--', linewidth=2)
    
    # Add labels and title
    plt.xlabel('Average Price (USD)', fontsize=14)
    plt.ylabel('Carbon Footprint (MT)', fontsize=14)
    plt.title(f'Relationship Between Price and Carbon Footprint (r = {corr:.2f})', fontsize=16)
    
    # Add a grid
    plt.grid(True, alpha=0.3)
    
    # Add a legend
    plt.legend(title='Sustainability Rating', title_fontsize=12)
    
    # Add text annotations for insights
    if abs(corr) < 0.1:
        insight = "No significant relationship between price and carbon footprint"
    elif corr > 0:
        insight = "Higher priced products tend to have HIGHER carbon footprints"
    else:
        insight = "Higher priced products tend to have LOWER carbon footprints"
    
    plt.figtext(0.5, 0.01, insight, ha='center', fontsize=14, 
               bbox=dict(facecolor='white', alpha=0.8, boxstyle='round,pad=0.5'))
    
    # Add price category markers
    price_ranges = [
        (0, 100, 'Budget'),
        (100, 250, 'Mid-range'),
        (250, 500, 'Premium')
    ]
    
    y_pos = 0.95
    for low, high, label in price_ranges:
        plt.axvspan(low, high, alpha=0.1, color='gray')
        plt.figtext(0.02, y_pos, f"{label}: ${low}-${high}", 
                   fontsize=10, bbox=dict(facecolor='white', alpha=0.8))
        y_pos -= 0.05
    
    # Save the figure
    plt.tight_layout()
    plt.savefig('simple_price_vs_carbon.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    print("Created simple scatter plot of price vs carbon footprint")
    
    # Create a second, even simpler visualization using price categories
    create_categorical_analysis(df)

def create_categorical_analysis(df):
    """Create a bar chart showing average carbon footprint by price category"""
    
    # Create price categories
    bins = [0, 100, 250, 500]
    labels = ['Budget', 'Mid-range', 'Premium']
    df['Price_Category'] = pd.cut(df['Average_Price_USD'], bins=bins, labels=labels)
    
    # Calculate average carbon footprint by price category
    category_data = df.groupby('Price_Category').agg({
        'Carbon_Footprint_MT': 'mean',
        'Brand_ID': 'count'
    }).reset_index()
    
    # Create the plot
    plt.figure(figsize=(10, 6))
    
    # Create bar chart
    ax = sns.barplot(
        data=category_data,
        x='Price_Category',
        y='Carbon_Footprint_MT',
        palette='Blues_d'
    )
    
    # Add the number of brands in each category
    for i, row in enumerate(category_data.itertuples()):
        ax.text(i, row.Carbon_Footprint_MT + 5, f'n={row.Brand_ID}', 
               ha='center', va='bottom', fontsize=12)
    
    # Add labels and title
    plt.xlabel('Price Category', fontsize=14)
    plt.ylabel('Average Carbon Footprint (MT)', fontsize=14)
    plt.title('Average Carbon Footprint by Price Category', fontsize=16)
    
    # Save the figure
    plt.tight_layout()
    plt.savefig('price_category_carbon.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    print("Created bar chart of price categories vs carbon footprint")

if __name__ == "__main__":
    create_simple_scatter_plot()
