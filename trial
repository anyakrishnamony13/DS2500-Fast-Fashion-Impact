'''
DS 2500
Final Project: Environmental Impact of Fast Fashion Brands
4/1/25
'''

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from matplotlib.ticker import FuncFormatter

# Set the style for our plots
plt.style.use('ggplot')
sns.set_palette('viridis')
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 12

# Load the data
def load_data(filename='Sustainable Fashion Export 2025-04-06 19-58-02.csv'):
    df = pd.read_csv(filename)
    
    # Convert numeric columns
    numeric_columns = ['Carbon_Footprint_MT', 'Water_Usage_Liters', 
                       'Waste_Production_KG', 'Average_Price_USD', 'Year']
    for col in numeric_columns:
        df[col] = pd.to_numeric(df[col], errors='coerce')
    
    # Convert binary columns
    df['Eco_Friendly'] = df['Eco_Friendly_Manufacturing'].map({'Yes': 1, 'No': 0})
    df['Has_Recycling'] = df['Recycling_Programs'].map({'Yes': 1, 'No': 0})
    
    return df

# Helper function to format large numbers
def format_millions(x, pos):
    return f'{x/1000000:.1f}M'

def format_thousands(x, pos):
    return f'{x/1000:.1f}K'

# 1. Environmental metrics over time
def plot_metrics_over_time(df):
    # Group by year and calculate averages
    yearly = df.groupby('Year').agg({
        'Carbon_Footprint_MT': 'mean',
        'Water_Usage_Liters': 'mean',
        'Waste_Production_KG': 'mean',
        'Brand_ID': 'count'
    }).reset_index()
    
    yearly = yearly.rename(columns={'Brand_ID': 'Brand_Count'})
    
    # Create figure with 3 subplots
    fig, axes = plt.subplots(3, 1, figsize=(12, 15))
    
    # Plot 1: Carbon Footprint
    sns.lineplot(data=yearly, x='Year', y='Carbon_Footprint_MT', 
                marker='o', linewidth=2.5, color='#2ca02c', ax=axes[0])
    
    # Add brand count as annotations
    for x, y, count in zip(yearly['Year'], yearly['Carbon_Footprint_MT'], yearly['Brand_Count']):
        axes[0].annotate(f'n={count}', (x, y), 
                        textcoords="offset points", 
                        xytext=(0, 10), 
                        ha='center')
    
    axes[0].set_title('Average Carbon Footprint Over Time', fontsize=14)
    axes[0].set_xlabel('Year')
    axes[0].set_ylabel('Carbon Footprint (MT)')
    
    # Plot 2: Water Usage
    sns.lineplot(data=yearly, x='Year', y='Water_Usage_Liters', 
                marker='o', linewidth=2.5, color='#1f77b4', ax=axes[1])
    
    # Format y-axis for millions
    axes[1].yaxis.set_major_formatter(FuncFormatter(format_millions))
    
    axes[1].set_title('Average Water Usage Over Time', fontsize=14)
    axes[1].set_xlabel('Year')
    axes[1].set_ylabel('Water Usage (Liters)')
    
    # Plot 3: Waste Production
    sns.lineplot(data=yearly, x='Year', y='Waste_Production_KG', 
                marker='o', linewidth=2.5, color='#d62728', ax=axes[2])
    
    # Format y-axis for thousands
    axes[2].yaxis.set_major_formatter(FuncFormatter(format_thousands))
    
    axes[2].set_title('Average Waste Production Over Time', fontsize=14)
    axes[2].set_xlabel('Year')
    axes[2].set_ylabel('Waste Production (KG)')
    
    plt.tight_layout()
    plt.savefig('environmental_metrics_over_time.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return yearly

# 2. Sustainability rating reality check
def analyze_sustainability_ratings(df):
    # Group by sustainability rating
    rating_analysis = df.groupby('Sustainability_Rating').agg({
        'Carbon_Footprint_MT': 'mean',
        'Water_Usage_Liters': 'mean',
        'Waste_Production_KG': 'mean',
        'Brand_ID': 'count'
    }).reset_index()
    
    # Convert to readable units
    rating_analysis['Water_Usage_Millions'] = rating_analysis['Water_Usage_Liters'] / 1000000
    rating_analysis['Waste_Production_Tons'] = rating_analysis['Waste_Production_KG'] / 1000
    
    # Create categorical order for ratings
    rating_analysis['Sustainability_Rating'] = pd.Categorical(
        rating_analysis['Sustainability_Rating'],
        categories=['A', 'B', 'C', 'D'],
        ordered=True
    )
    
    # Sort by rating
    rating_analysis = rating_analysis.sort_values('Sustainability_Rating')
    
    # Create a plot
    fig, ax = plt.subplots(figsize=(10, 6))
    
    # Plot with error bars
    plot = sns.barplot(x='Sustainability_Rating', y='Carbon_Footprint_MT', 
                      data=rating_analysis, palette='RdYlGn_r', ax=ax)
    
    # Add brand count labels
    for i, count in enumerate(rating_analysis['Brand_ID']):
        ax.text(i, 5, f'n={count}', ha='center', fontsize=10)
    
    ax.set_title('Carbon Footprint by Sustainability Rating', fontsize=14)
    ax.set_ylabel('Average Carbon Footprint (MT)')
    ax.set_xlabel('Sustainability Rating (A=Best to D=Worst)')
    
    plt.tight_layout()
    plt.savefig('sustainability_rating_reality.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return rating_analysis

# 3. Material impact comparison
def analyze_material_impact(df):
    # Group by material type
    material_analysis = df.groupby('Material_Type').agg({
        'Carbon_Footprint_MT': 'mean',
        'Water_Usage_Liters': 'mean',
        'Waste_Production_KG': 'mean',
        'Brand_ID': 'count'
    }).reset_index()
    
    # Only include materials with sufficient samples
    material_analysis = material_analysis[material_analysis['Brand_ID'] >= 2]
    
    # Sort by carbon footprint
    material_analysis = material_analysis.sort_values('Carbon_Footprint_MT', ascending=False)
    
    # Create plot
    fig, ax = plt.subplots(figsize=(12, 8))
    
    # Plot horizontal bar chart
    sns.barplot(y='Material_Type', x='Carbon_Footprint_MT', 
               data=material_analysis, palette='viridis', ax=ax)
    
    # Add brand count labels
    for i, count in enumerate(material_analysis['Brand_ID']):
        ax.text(5, i, f'n={count}', va='center', fontsize=9)
    
    ax.set_title('Carbon Footprint by Material Type', fontsize=14)
    ax.set_xlabel('Average Carbon Footprint (MT)')
    ax.set_ylabel('Material Type')
    
    plt.tight_layout()
    plt.savefig('material_impact.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return material_analysis

# 4. Improved price vs environmental impact visualization
def analyze_price_vs_impact(df):
    # Create price categories
    df['Price_Category'] = pd.qcut(df['Average_Price_USD'], 3, 
                                  labels=['Low', 'Medium', 'High'])
    
    # Group by price category
    price_analysis = df.groupby('Price_Category').agg({
        'Carbon_Footprint_MT': 'mean',
        'Water_Usage_Liters': 'mean',
        'Waste_Production_KG': 'mean',
        'Average_Price_USD': 'mean',
        'Brand_ID': 'count'
    }).reset_index()
    
    # Create plot
    fig, ax = plt.subplots(figsize=(10, 6))
    
    # Bar plot
    sns.barplot(x='Price_Category', y='Carbon_Footprint_MT', 
               data=price_analysis, palette='Blues_d', ax=ax)
    
    # Add average price labels
    for i, (count, price) in enumerate(zip(price_analysis['Brand_ID'], 
                                         price_analysis['Average_Price_USD'])):
        ax.text(i, 5, f'n={count}\n${price:.0f} avg', ha='center', fontsize=10)
    
    ax.set_title('Carbon Footprint by Price Category', fontsize=14)
    ax.set_ylabel('Average Carbon Footprint (MT)')
    ax.set_xlabel('Price Category')
    
    plt.tight_layout()
    plt.savefig('price_vs_impact.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    # Create binned scatter plot for better visualization
    # of the relationship between price and carbon footprint
    plt.figure(figsize=(10, 6))
    
    # Bin data points to avoid overcrowding
    hexbin = plt.hexbin(df['Average_Price_USD'], df['Carbon_Footprint_MT'], 
                       gridsize=20, cmap='viridis', mincnt=1)
    
    # Add a colorbar
    cbar = plt.colorbar(hexbin)
    cbar.set_label('Count in bin')
    
    # Calculate and plot trendline
    z = np.polyfit(df['Average_Price_USD'], df['Carbon_Footprint_MT'], 1)
    p = np.poly1d(z)
    plt.plot(np.sort(df['Average_Price_USD']), 
            p(np.sort(df['Average_Price_USD'])), 
            "r--", linewidth=2)
    
    # Calculate correlation
    corr = df['Average_Price_USD'].corr(df['Carbon_Footprint_MT'])
    
    plt.title(f'Relationship Between Price and Carbon Footprint (r = {corr:.2f})', fontsize=14)
    plt.xlabel('Average Price (USD)')
    plt.ylabel('Carbon Footprint (MT)')
    
    plt.tight_layout()
    plt.savefig('price_impact_hexbin.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return price_analysis

# 5. Eco-friendly claims vs reality
def analyze_eco_friendly_claims(df):
    # Group by eco-friendly manufacturing claims
    eco_analysis = df.groupby('Eco_Friendly_Manufacturing').agg({
        'Carbon_Footprint_MT': 'mean',
        'Water_Usage_Liters': 'mean',
        'Waste_Production_KG': 'mean',
        'Brand_ID': 'count'
    }).reset_index()
    
    # Convert to readable units
    eco_analysis['Water_Usage_Millions'] = eco_analysis['Water_Usage_Liters'] / 1000000
    eco_analysis['Waste_Production_Tons'] = eco_analysis['Waste_Production_KG'] / 1000
    
    # Create a multi-metric comparison
    fig, axes = plt.subplots(1, 3, figsize=(15, 5))
    
    # Carbon footprint
    sns.barplot(x='Eco_Friendly_Manufacturing', y='Carbon_Footprint_MT', 
               data=eco_analysis, palette='Set2', ax=axes[0])
    
    # Add brand count labels
    for i, count in enumerate(eco_analysis['Brand_ID']):
        axes[0].text(i, 10, f'n={count}', ha='center', fontsize=10)
    
    axes[0].set_title('Carbon Footprint (MT)')
    axes[0].set_xlabel('Eco-Friendly Claim')
    
    # Water usage
    sns.barplot(x='Eco_Friendly_Manufacturing', y='Water_Usage_Millions', 
               data=eco_analysis, palette='Set2', ax=axes[1])
    
    axes[1].set_title('Water Usage (Million Liters)')
    axes[1].set_xlabel('Eco-Friendly Claim')
    
    # Waste production
    sns.barplot(x='Eco_Friendly_Manufacturing', y='Waste_Production_Tons', 
               data=eco_analysis, palette='Set2', ax=axes[2])
    
    axes[2].set_title('Waste Production (Tons)')
    axes[2].set_xlabel('Eco-Friendly Claim')
    
    plt.suptitle('Environmental Impact by Eco-Friendly Manufacturing Claims', fontsize=16)
    plt.tight_layout()
    plt.subplots_adjust(top=0.85)
    plt.savefig('eco_friendly_reality.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return eco_analysis

# Main function
def main():
    # Load the data
    df = load_data()
    
    # Generate visualizations
    yearly_trends = plot_metrics_over_time(df)
    rating_analysis = analyze_sustainability_ratings(df)
    material_analysis = analyze_material_impact(df)
    price_analysis = analyze_price_vs_impact(df)
    eco_analysis = analyze_eco_friendly_claims(df)
    
    # Print insights
    print("\n=== ENVIRONMENTAL IMPACT ANALYSIS RESULTS ===\n")
    
    # Time trends
    print("ENVIRONMENTAL METRICS OVER TIME:")
    first_year = yearly_trends['Year'].min()
    last_year = yearly_trends['Year'].max()
    carbon_change = ((yearly_trends[yearly_trends['Year']==last_year]['Carbon_Footprint_MT'].values[0] / 
                     yearly_trends[yearly_trends['Year']==first_year]['Carbon_Footprint_MT'].values[0]) - 1) * 100
    
    print(f"- From {first_year} to {last_year}, carbon footprint has {'increased' if carbon_change > 0 else 'decreased'} by {abs(carbon_change):.1f}%")
    
    # Sustainability ratings
    print("\nSUSTAINABILITY RATING REALITY CHECK:")
    if 'A' in rating_analysis['Sustainability_Rating'].values and 'D' in rating_analysis['Sustainability_Rating'].values:
        a_carbon = rating_analysis[rating_analysis['Sustainability_Rating']=='A']['Carbon_Footprint_MT'].values[0]
        d_carbon = rating_analysis[rating_analysis['Sustainability_Rating']=='D']['Carbon_Footprint_MT'].values[0]
        pct_diff = ((a_carbon / d_carbon) - 1) * 100
        
        if a_carbon < d_carbon:
            print(f"- VERIFIED: A-rated brands have {abs(pct_diff):.1f}% lower carbon footprint than D-rated brands")
        else:
            print(f"- CONCERNING: A-rated brands have {pct_diff:.1f}% higher carbon footprint than D-rated brands")
    
    # Material impact
    print("\nMATERIAL IMPACT:")
    best_material = material_analysis.iloc[-1]
    worst_material = material_analysis.iloc[0]
    print(f"- Most eco-friendly material: {best_material['Material_Type']} ({best_material['Carbon_Footprint_MT']:.1f} MT carbon)")
    print(f"- Least eco-friendly material: {worst_material['Material_Type']} ({worst_material['Carbon_Footprint_MT']:.1f} MT carbon)")
    
    # Price vs Impact
    print("\nPRICE VS ENVIRONMENTAL IMPACT:")
    corr = df['Average_Price_USD'].corr(df['Carbon_Footprint_MT'])
    if abs(corr) < 0.1:
        relationship = "no significant relationship"
    elif corr > 0:
        relationship = f"positive relationship (r={corr:.2f}): higher prices correlate with higher carbon footprint"
    else:
        relationship = f"negative relationship (r={corr:.2f}): higher prices correlate with lower carbon footprint"
    
    print(f"- There is {relationship}")
    
    # Eco-friendly claims
    print("\nECO-FRIENDLY CLAIMS VS REALITY:")
    yes_carbon = eco_analysis[eco_analysis['Eco_Friendly_Manufacturing']=='Yes']['Carbon_Footprint_MT'].values[0]
    no_carbon = eco_analysis[eco_analysis['Eco_Friendly_Manufacturing']=='No']['Carbon_Footprint_MT'].values[0]
    pct_diff = ((yes_carbon / no_carbon) - 1) * 100
    
    if yes_carbon < no_carbon:
        print(f"- VERIFIED: Brands claiming eco-friendly manufacturing have {abs(pct_diff):.1f}% lower carbon footprint")
    else:
        print(f"- GREENWASHING CONCERN: Brands claiming eco-friendly manufacturing have {pct_diff:.1f}% higher carbon footprint")
    
    print("\nAll visualizations have been saved as PNG files in the current directory.")

if __name__ == "__main__":
    main()
